{"version":3,"file":"index.cjs.js","sources":["../lib/create-context.tsx"],"sourcesContent":["import React from \"react\";\n\nconst NullCtx: unique symbol = Symbol(\"NULL_CTX\");\n\nexport class ContextError extends Error {}\n\nexport function createContext<C = any>(p: { errorMsg?: string; initialValue?: C; initializer: () => C;}): \n  [React.Context<C | typeof NullCtx>, () => C, (p: React.PropsWithChildren) => JSX.Element];\n\nexport function createContext<C = any>(p?: { errorMsg?: string; initialValue?: C; initializer?: never }): \n  [React.Context<C | typeof NullCtx>, () => C, (p: React.PropsWithChildren<{ value: C }>) => JSX.Element];\n\nexport function createContext<C = any>(p) {\n  const context = React.createContext<C | typeof NullCtx>(p?.initialValue || NullCtx);\n  const hook = () => {\n    const value = React.useContext(context);\n    if (value === NullCtx) throw new ContextError(p?.errorMsg ?? \"cannot use context outside provider\");\n    return value;\n  };\n  const Provider = (p && p.initializer != undefined) \n    ? ({ children }: React.PropsWithChildren) => <context.Provider value={p.initializer()}>{children}</context.Provider>\n    : ({ value, children }: React.PropsWithChildren<{ value: C }>) => <context.Provider value={value}>{children}</context.Provider> \n  return [context, hook, Provider];\n}"],"names":["NullCtx","ContextError","createContext","p","context","React","hook","value","Provider","children","jsx"],"mappings":"wIAEMA,EAAyB,OAAO,UAAU,EAEzC,MAAMC,UAAqB,KAAM,CAAC,CAQlC,SAASC,EAAuBC,EAAG,CACxC,MAAMC,EAAUC,EAAM,cAAkCF,GAAG,cAAgBH,CAAO,EAC5EM,EAAO,IAAM,CACjB,MAAMC,EAAQF,EAAM,WAAWD,CAAO,EACtC,GAAIG,IAAUP,EAAS,MAAM,IAAIC,EAAaE,GAAG,UAAY,qCAAqC,EAClG,OAAOI,CACT,EACMC,EAAYL,GAAKA,EAAE,aAAe,KACpC,CAAC,CAAE,SAAAM,CAAA,IAAwCC,EAAAA,IAACN,EAAQ,SAAR,CAAiB,MAAOD,EAAE,YAAA,EAAgB,SAAAM,CAAA,CAAS,EAC/F,CAAC,CAAE,MAAAF,EAAO,SAAAE,CAAA,IAAsDC,EAAAA,IAACN,EAAQ,SAAR,CAAiB,MAAAG,EAAe,SAAAE,CAAA,CAAS,EAC9G,MAAO,CAACL,EAASE,EAAME,CAAQ,CACjC"}